{
  "name": "emitter",
  "description": "a basic event emitter",
  "version": "0.10.0",
  "dependencies": {
    "merge": "github:yields/merge#2f357cb"
  },
  "devDependencies": {
    "inherit": "github:nathan7/inherit#f1a75b4",
    "serve": "github:jkroso/serve",
    "b": "github:vesln/b#3a16d17",
    "chai-spies": "*",
    "mocha": "*",
    "chai": "*"
  },
  "keywords": [
    "event",
    "emitter"
  ],
  "author": {
    "name": "Jakeb Rosoman",
    "email": "jkroso@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jkroso/Emitter.git"
  },
  "license": "MIT",
  "gitHead": "66a6335294a49abe3b3ee566db87267b1d35e8fa",
  "readme": "# Emitter\n\nA simple but optimized event emitter.\n\n## Features\n\n- __inherited subscriptions:__\nThis allows you to define subscriptions on the class rather than on each instance of a class which is both more efficient in terms of memery and sometimes cleaner too.\n\n## Installation\n\nWith your favourite package manager:\n\n- [packin](//github.com/jkroso/packin): `packin add jkroso/emitter`\n- [component](//github.com/component/component#installing-packages): `component install jkroso/emitter`\n- [npm](//npmjs.org/doc/cli/npm-install.html): `npm install jkroso/emitter`\n\nthen in your app:\n\n```javascript\nvar Emitter = require('emitter')\n```\n\n## API\n\n### Emitter([obj])\n\n  Emitter constructor. Can optionally also act as a mixin\n\n### Emitter#emit(topic, [...args])\n\n  Process `event`. All arguments after `topic` will\n  be passed to all listeners\n\n```js\nemitter.emit('event', new Date)\n```\n\n### Emitter#on(topic, fn)\n\n  Add a subscription under a topic name\n\n```js\nemitter.on('event', function(data){})\n```\n\n### Emitter#off([topic], [fn])\n\n  Remove subscriptions\n\n```js\nemitter.off()            // clears all listeners\nemitter.off('topic')     // clears all `topic` listeners\nemitter.off('topic', fn) // as above but only where `listener == fn`\n```\n\n### Emitter#once(topic, fn)\n\n  subscribe `fn` but remove if after its first invocation\n\n### Emitter.hasSubscription(emitter, topic, [fn])\n\n  see if `emitter` has any subscriptions matching\n  `topic` and optionally also `fn`\n\n### Emitter.subscriptions(emitter, topic)\n\n  get an Array of subscriptions for `topic`\n\n## Running the tests\n\nrun `make` then navigate your browser to [test/index.html](test/index.html)",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/jkroso/Emitter/issues"
  },
  "homepage": "https://github.com/jkroso/Emitter#readme",
  "_id": "emitter@0.10.0",
  "_shasum": "5689f1099ea0fb4df1f86997a1787bb2c1af21eb",
  "_from": "jkroso/Emitter#0.10.0",
  "_resolved": "git://github.com/jkroso/Emitter.git#66a6335294a49abe3b3ee566db87267b1d35e8fa"
}
