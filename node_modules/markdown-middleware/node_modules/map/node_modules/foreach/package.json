{
  "name": "foreach",
  "version": "0.8.10",
  "description": "iterate over key value pairs",
  "repository": {
    "type": "git",
    "url": "git://github.com/jkroso/foreach.git"
  },
  "bugs": {
    "url": "https://github.com/jkroso/foreach/issues"
  },
  "keywords": [
    "iterate",
    "each",
    "array",
    "async"
  ],
  "author": {
    "name": "Jake Rosoman"
  },
  "license": "MIT",
  "dependencies": {
    "lift-result": "~0.1.4",
    "result-type": "1.0.0",
    "result": "~1.0.1"
  },
  "devDependencies": {
    "serve": "github:jkroso/serve",
    "mocha": "*",
    "chai": "*"
  },
  "gitHead": "4cb9c0a86ce73e16f49ba9f424369b569c7942e8",
  "readme": "\n# foreach\n\n  iterate over key value pairs, arrays and objects. There are also two alternative asynchronous implementations with matching api's\n\n## Installation\n\nWith your favourite package manager:\n\n- [packin](//github.com/jkroso/packin): `packin add jkroso/forEach`\n- [component](//github.com/component/component#installing-packages): `component install jkroso/forEach`\n- [npm](//npmjs.org/doc/cli/npm-install.html): `npm install jkroso/forEach`\n\nthen in your app:\n\n```js\nvar foreach = require('foreach')\nvar async = require('foreach/async')\nvar series = require('foreach/series')\n```\n\n## API\n\n### foreach(object, iterator, context)\n\n  apply `iterator` to each key value pair in `object`. The value is passed as the first argument and the key as the second. If you pass `context` that will be the value of `this` inside of `iterator`.\n\n```js\nfunction log(v, k){\n  console.log('key: %s, value: %s', k, v)\n}\nforeach({a:1,b:2}, log)\n// => key: a, value 1\n// => key: b, value 2\nforeach([1,2], log)\n// => key: 0, value 1\n// => key: 1, value 2\n```\n\n### async(object, iterator, context)\n\n  Same API as the sync version except it will return a [Result](//github.com/jkroso/result) object, which will either, resolve when all items have been processed or fail when one fails. No ordering is guaranteed between items. Arguments you pass into `async` can also be wrapped in Result objects with the desired effect.\n\n```js\nasync([20, 10, 0], function(value, i){\n  var result = new Result\n  setTimeout(function(){\n    result.write()\n  }, value)\n  return result\n}).then(function(){\n  // This function runs after all async processes have completed\n  // Note that in this example the last iteration will complete before\n  // the first because all iterations are run in parrallel and the last \n  // one completes in the shortest time\n})\n```\n\n### series(object, iterator, context)\n\n  Like `async` but the next item will not be processed until the previous one completes",
  "readmeFilename": "Readme.md",
  "homepage": "https://github.com/jkroso/foreach#readme",
  "_id": "foreach@0.8.10",
  "_shasum": "93c0d086ccf6fd6c7a02f06681e739369750bc64",
  "_from": "jkroso/forEach#0.8.10",
  "_resolved": "git://github.com/jkroso/forEach.git#4cb9c0a86ce73e16f49ba9f424369b569c7942e8"
}
